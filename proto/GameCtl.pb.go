// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: GameCtl.proto

package proto

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Room_Status int32

const (
	Room_ON_START     Room_Status = 0
	Room_ON_WAIT      Room_Status = 1
	Room_ON_HOST_TURN Room_Status = 2
	Room_ON_DUEL_TURN Room_Status = 3
	Room_ON_END       Room_Status = 4
)

var Room_Status_name = map[int32]string{
	0: "ON_START",
	1: "ON_WAIT",
	2: "ON_HOST_TURN",
	3: "ON_DUEL_TURN",
	4: "ON_END",
}

var Room_Status_value = map[string]int32{
	"ON_START":     0,
	"ON_WAIT":      1,
	"ON_HOST_TURN": 2,
	"ON_DUEL_TURN": 3,
	"ON_END":       4,
}

func (x Room_Status) String() string {
	return proto.EnumName(Room_Status_name, int32(x))
}

func (Room_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_844dd485888a1988, []int{7, 0}
}

type ErrorMsg struct {
	MsgInfo              string   `protobuf:"bytes,1,opt,name=msg_info,json=msgInfo,proto3" json:"msg_info,omitempty"`
	MsgDesp              string   `protobuf:"bytes,2,opt,name=msg_desp,json=msgDesp,proto3" json:"msg_desp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ErrorMsg) Reset()         { *m = ErrorMsg{} }
func (m *ErrorMsg) String() string { return proto.CompactTextString(m) }
func (*ErrorMsg) ProtoMessage()    {}
func (*ErrorMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_844dd485888a1988, []int{0}
}
func (m *ErrorMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErrorMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErrorMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ErrorMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorMsg.Merge(m, src)
}
func (m *ErrorMsg) XXX_Size() int {
	return m.Size()
}
func (m *ErrorMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorMsg proto.InternalMessageInfo

func (m *ErrorMsg) GetMsgInfo() string {
	if m != nil {
		return m.MsgInfo
	}
	return ""
}

func (m *ErrorMsg) GetMsgDesp() string {
	if m != nil {
		return m.MsgDesp
	}
	return ""
}

func (*ErrorMsg) XXX_MessageName() string {
	return "RoomStatus.ErrorMsg"
}

type RoomListReq struct {
	Requirement          string   `protobuf:"bytes,1,opt,name=requirement,proto3" json:"requirement,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomListReq) Reset()         { *m = RoomListReq{} }
func (m *RoomListReq) String() string { return proto.CompactTextString(m) }
func (*RoomListReq) ProtoMessage()    {}
func (*RoomListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_844dd485888a1988, []int{1}
}
func (m *RoomListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoomListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomListReq.Merge(m, src)
}
func (m *RoomListReq) XXX_Size() int {
	return m.Size()
}
func (m *RoomListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomListReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoomListReq proto.InternalMessageInfo

func (m *RoomListReq) GetRequirement() string {
	if m != nil {
		return m.Requirement
	}
	return ""
}

func (*RoomListReq) XXX_MessageName() string {
	return "RoomStatus.RoomListReq"
}

type RoomListResp struct {
	Timestamp            string    `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Result               []*Room   `protobuf:"bytes,2,rep,name=result,proto3" json:"result,omitempty"`
	ErrorMsg             *ErrorMsg `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RoomListResp) Reset()         { *m = RoomListResp{} }
func (m *RoomListResp) String() string { return proto.CompactTextString(m) }
func (*RoomListResp) ProtoMessage()    {}
func (*RoomListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_844dd485888a1988, []int{2}
}
func (m *RoomListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoomListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomListResp.Merge(m, src)
}
func (m *RoomListResp) XXX_Size() int {
	return m.Size()
}
func (m *RoomListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomListResp.DiscardUnknown(m)
}

var xxx_messageInfo_RoomListResp proto.InternalMessageInfo

func (m *RoomListResp) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *RoomListResp) GetResult() []*Room {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RoomListResp) GetErrorMsg() *ErrorMsg {
	if m != nil {
		return m.ErrorMsg
	}
	return nil
}

func (*RoomListResp) XXX_MessageName() string {
	return "RoomStatus.RoomListResp"
}

type RoomCreateReq struct {
	UserId               string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomCreateReq) Reset()         { *m = RoomCreateReq{} }
func (m *RoomCreateReq) String() string { return proto.CompactTextString(m) }
func (*RoomCreateReq) ProtoMessage()    {}
func (*RoomCreateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_844dd485888a1988, []int{3}
}
func (m *RoomCreateReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomCreateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomCreateReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoomCreateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomCreateReq.Merge(m, src)
}
func (m *RoomCreateReq) XXX_Size() int {
	return m.Size()
}
func (m *RoomCreateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomCreateReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoomCreateReq proto.InternalMessageInfo

func (m *RoomCreateReq) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (*RoomCreateReq) XXX_MessageName() string {
	return "RoomStatus.RoomCreateReq"
}

type RoomCreateResp struct {
	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Timestamp string `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Status    int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	// Types that are valid to be assigned to ResponseMsg:
	//	*RoomCreateResp_CellStatus
	//	*RoomCreateResp_ErrorMsg
	ResponseMsg          isRoomCreateResp_ResponseMsg `protobuf_oneof:"response_msg"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *RoomCreateResp) Reset()         { *m = RoomCreateResp{} }
func (m *RoomCreateResp) String() string { return proto.CompactTextString(m) }
func (*RoomCreateResp) ProtoMessage()    {}
func (*RoomCreateResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_844dd485888a1988, []int{4}
}
func (m *RoomCreateResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomCreateResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomCreateResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoomCreateResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomCreateResp.Merge(m, src)
}
func (m *RoomCreateResp) XXX_Size() int {
	return m.Size()
}
func (m *RoomCreateResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomCreateResp.DiscardUnknown(m)
}

var xxx_messageInfo_RoomCreateResp proto.InternalMessageInfo

type isRoomCreateResp_ResponseMsg interface {
	isRoomCreateResp_ResponseMsg()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RoomCreateResp_CellStatus struct {
	CellStatus *Room `protobuf:"bytes,4,opt,name=cell_status,json=cellStatus,proto3,oneof" json:"cell_status,omitempty"`
}
type RoomCreateResp_ErrorMsg struct {
	ErrorMsg *ErrorMsg `protobuf:"bytes,5,opt,name=error_msg,json=errorMsg,proto3,oneof" json:"error_msg,omitempty"`
}

func (*RoomCreateResp_CellStatus) isRoomCreateResp_ResponseMsg() {}
func (*RoomCreateResp_ErrorMsg) isRoomCreateResp_ResponseMsg()   {}

func (m *RoomCreateResp) GetResponseMsg() isRoomCreateResp_ResponseMsg {
	if m != nil {
		return m.ResponseMsg
	}
	return nil
}

func (m *RoomCreateResp) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *RoomCreateResp) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *RoomCreateResp) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *RoomCreateResp) GetCellStatus() *Room {
	if x, ok := m.GetResponseMsg().(*RoomCreateResp_CellStatus); ok {
		return x.CellStatus
	}
	return nil
}

func (m *RoomCreateResp) GetErrorMsg() *ErrorMsg {
	if x, ok := m.GetResponseMsg().(*RoomCreateResp_ErrorMsg); ok {
		return x.ErrorMsg
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RoomCreateResp) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RoomCreateResp_CellStatus)(nil),
		(*RoomCreateResp_ErrorMsg)(nil),
	}
}

func (*RoomCreateResp) XXX_MessageName() string {
	return "RoomStatus.RoomCreateResp"
}

type RoomReq struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomReq) Reset()         { *m = RoomReq{} }
func (m *RoomReq) String() string { return proto.CompactTextString(m) }
func (*RoomReq) ProtoMessage()    {}
func (*RoomReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_844dd485888a1988, []int{5}
}
func (m *RoomReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoomReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomReq.Merge(m, src)
}
func (m *RoomReq) XXX_Size() int {
	return m.Size()
}
func (m *RoomReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoomReq proto.InternalMessageInfo

func (m *RoomReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (*RoomReq) XXX_MessageName() string {
	return "RoomStatus.RoomReq"
}

type RoomResp struct {
	Timestamp string `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Types that are valid to be assigned to ResponseMsg:
	//	*RoomResp_RoomInfo
	//	*RoomResp_Error
	ResponseMsg          isRoomResp_ResponseMsg `protobuf_oneof:"response_msg"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *RoomResp) Reset()         { *m = RoomResp{} }
func (m *RoomResp) String() string { return proto.CompactTextString(m) }
func (*RoomResp) ProtoMessage()    {}
func (*RoomResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_844dd485888a1988, []int{6}
}
func (m *RoomResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoomResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomResp.Merge(m, src)
}
func (m *RoomResp) XXX_Size() int {
	return m.Size()
}
func (m *RoomResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomResp.DiscardUnknown(m)
}

var xxx_messageInfo_RoomResp proto.InternalMessageInfo

type isRoomResp_ResponseMsg interface {
	isRoomResp_ResponseMsg()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RoomResp_RoomInfo struct {
	RoomInfo *Room `protobuf:"bytes,2,opt,name=room_info,json=roomInfo,proto3,oneof" json:"room_info,omitempty"`
}
type RoomResp_Error struct {
	Error *ErrorMsg `protobuf:"bytes,3,opt,name=error,proto3,oneof" json:"error,omitempty"`
}

func (*RoomResp_RoomInfo) isRoomResp_ResponseMsg() {}
func (*RoomResp_Error) isRoomResp_ResponseMsg()    {}

func (m *RoomResp) GetResponseMsg() isRoomResp_ResponseMsg {
	if m != nil {
		return m.ResponseMsg
	}
	return nil
}

func (m *RoomResp) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *RoomResp) GetRoomInfo() *Room {
	if x, ok := m.GetResponseMsg().(*RoomResp_RoomInfo); ok {
		return x.RoomInfo
	}
	return nil
}

func (m *RoomResp) GetError() *ErrorMsg {
	if x, ok := m.GetResponseMsg().(*RoomResp_Error); ok {
		return x.Error
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RoomResp) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RoomResp_RoomInfo)(nil),
		(*RoomResp_Error)(nil),
	}
}

func (*RoomResp) XXX_MessageName() string {
	return "RoomStatus.RoomResp"
}

type Room struct {
	Key                  string        `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	HostId               string        `protobuf:"bytes,2,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	DuelerId             string        `protobuf:"bytes,3,opt,name=dueler_id,json=duelerId,proto3" json:"dueler_id,omitempty"`
	Status               Room_Status   `protobuf:"varint,4,opt,name=status,proto3,enum=RoomStatus.Room_Status" json:"status,omitempty"`
	Round                int32         `protobuf:"varint,5,opt,name=round,proto3" json:"round,omitempty"`
	Cell                 int32         `protobuf:"varint,6,opt,name=cell,proto3" json:"cell,omitempty"`
	CellStatus           []*CellStatus `protobuf:"bytes,7,rep,name=cell_status,json=cellStatus,proto3" json:"cell_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Room) Reset()         { *m = Room{} }
func (m *Room) String() string { return proto.CompactTextString(m) }
func (*Room) ProtoMessage()    {}
func (*Room) Descriptor() ([]byte, []int) {
	return fileDescriptor_844dd485888a1988, []int{7}
}
func (m *Room) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Room) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Room.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Room) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Room.Merge(m, src)
}
func (m *Room) XXX_Size() int {
	return m.Size()
}
func (m *Room) XXX_DiscardUnknown() {
	xxx_messageInfo_Room.DiscardUnknown(m)
}

var xxx_messageInfo_Room proto.InternalMessageInfo

func (m *Room) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Room) GetHostId() string {
	if m != nil {
		return m.HostId
	}
	return ""
}

func (m *Room) GetDuelerId() string {
	if m != nil {
		return m.DuelerId
	}
	return ""
}

func (m *Room) GetStatus() Room_Status {
	if m != nil {
		return m.Status
	}
	return Room_ON_START
}

func (m *Room) GetRound() int32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *Room) GetCell() int32 {
	if m != nil {
		return m.Cell
	}
	return 0
}

func (m *Room) GetCellStatus() []*CellStatus {
	if m != nil {
		return m.CellStatus
	}
	return nil
}

func (*Room) XXX_MessageName() string {
	return "RoomStatus.Room"
}

type CellStatus struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Turn                 int32    `protobuf:"varint,2,opt,name=turn,proto3" json:"turn,omitempty"`
	CellNum              int32    `protobuf:"varint,3,opt,name=cell_num,json=cellNum,proto3" json:"cell_num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CellStatus) Reset()         { *m = CellStatus{} }
func (m *CellStatus) String() string { return proto.CompactTextString(m) }
func (*CellStatus) ProtoMessage()    {}
func (*CellStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_844dd485888a1988, []int{8}
}
func (m *CellStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CellStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CellStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CellStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CellStatus.Merge(m, src)
}
func (m *CellStatus) XXX_Size() int {
	return m.Size()
}
func (m *CellStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_CellStatus.DiscardUnknown(m)
}

var xxx_messageInfo_CellStatus proto.InternalMessageInfo

func (m *CellStatus) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *CellStatus) GetTurn() int32 {
	if m != nil {
		return m.Turn
	}
	return 0
}

func (m *CellStatus) GetCellNum() int32 {
	if m != nil {
		return m.CellNum
	}
	return 0
}

func (*CellStatus) XXX_MessageName() string {
	return "RoomStatus.CellStatus"
}

type CellStatusReq struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Key    string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// Types that are valid to be assigned to Player:
	//	*CellStatusReq_IsPlayer
	//	*CellStatusReq_CellStatus
	Player               isCellStatusReq_Player `protobuf_oneof:"player"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *CellStatusReq) Reset()         { *m = CellStatusReq{} }
func (m *CellStatusReq) String() string { return proto.CompactTextString(m) }
func (*CellStatusReq) ProtoMessage()    {}
func (*CellStatusReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_844dd485888a1988, []int{9}
}
func (m *CellStatusReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CellStatusReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CellStatusReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CellStatusReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CellStatusReq.Merge(m, src)
}
func (m *CellStatusReq) XXX_Size() int {
	return m.Size()
}
func (m *CellStatusReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CellStatusReq.DiscardUnknown(m)
}

var xxx_messageInfo_CellStatusReq proto.InternalMessageInfo

type isCellStatusReq_Player interface {
	isCellStatusReq_Player()
	MarshalTo([]byte) (int, error)
	Size() int
}

type CellStatusReq_IsPlayer struct {
	IsPlayer bool `protobuf:"varint,3,opt,name=is_player,json=isPlayer,proto3,oneof" json:"is_player,omitempty"`
}
type CellStatusReq_CellStatus struct {
	CellStatus *CellStatus `protobuf:"bytes,4,opt,name=cell_status,json=cellStatus,proto3,oneof" json:"cell_status,omitempty"`
}

func (*CellStatusReq_IsPlayer) isCellStatusReq_Player()   {}
func (*CellStatusReq_CellStatus) isCellStatusReq_Player() {}

func (m *CellStatusReq) GetPlayer() isCellStatusReq_Player {
	if m != nil {
		return m.Player
	}
	return nil
}

func (m *CellStatusReq) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *CellStatusReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *CellStatusReq) GetIsPlayer() bool {
	if x, ok := m.GetPlayer().(*CellStatusReq_IsPlayer); ok {
		return x.IsPlayer
	}
	return false
}

func (m *CellStatusReq) GetCellStatus() *CellStatus {
	if x, ok := m.GetPlayer().(*CellStatusReq_CellStatus); ok {
		return x.CellStatus
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CellStatusReq) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CellStatusReq_IsPlayer)(nil),
		(*CellStatusReq_CellStatus)(nil),
	}
}

func (*CellStatusReq) XXX_MessageName() string {
	return "RoomStatus.CellStatusReq"
}

type CellStatusResp struct {
	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Key       string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Timestamp string `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Status    int32  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	// Types that are valid to be assigned to ResponseMsg:
	//	*CellStatusResp_CellStatus
	//	*CellStatusResp_ErrorMsg
	ResponseMsg          isCellStatusResp_ResponseMsg `protobuf_oneof:"response_msg"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *CellStatusResp) Reset()         { *m = CellStatusResp{} }
func (m *CellStatusResp) String() string { return proto.CompactTextString(m) }
func (*CellStatusResp) ProtoMessage()    {}
func (*CellStatusResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_844dd485888a1988, []int{10}
}
func (m *CellStatusResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CellStatusResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CellStatusResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CellStatusResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CellStatusResp.Merge(m, src)
}
func (m *CellStatusResp) XXX_Size() int {
	return m.Size()
}
func (m *CellStatusResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CellStatusResp.DiscardUnknown(m)
}

var xxx_messageInfo_CellStatusResp proto.InternalMessageInfo

type isCellStatusResp_ResponseMsg interface {
	isCellStatusResp_ResponseMsg()
	MarshalTo([]byte) (int, error)
	Size() int
}

type CellStatusResp_CellStatus struct {
	CellStatus *CellStatus `protobuf:"bytes,5,opt,name=cell_status,json=cellStatus,proto3,oneof" json:"cell_status,omitempty"`
}
type CellStatusResp_ErrorMsg struct {
	ErrorMsg *ErrorMsg `protobuf:"bytes,6,opt,name=error_msg,json=errorMsg,proto3,oneof" json:"error_msg,omitempty"`
}

func (*CellStatusResp_CellStatus) isCellStatusResp_ResponseMsg() {}
func (*CellStatusResp_ErrorMsg) isCellStatusResp_ResponseMsg()   {}

func (m *CellStatusResp) GetResponseMsg() isCellStatusResp_ResponseMsg {
	if m != nil {
		return m.ResponseMsg
	}
	return nil
}

func (m *CellStatusResp) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *CellStatusResp) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *CellStatusResp) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *CellStatusResp) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *CellStatusResp) GetCellStatus() *CellStatus {
	if x, ok := m.GetResponseMsg().(*CellStatusResp_CellStatus); ok {
		return x.CellStatus
	}
	return nil
}

func (m *CellStatusResp) GetErrorMsg() *ErrorMsg {
	if x, ok := m.GetResponseMsg().(*CellStatusResp_ErrorMsg); ok {
		return x.ErrorMsg
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CellStatusResp) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CellStatusResp_CellStatus)(nil),
		(*CellStatusResp_ErrorMsg)(nil),
	}
}

func (*CellStatusResp) XXX_MessageName() string {
	return "RoomStatus.CellStatusResp"
}
func init() {
	proto.RegisterEnum("RoomStatus.Room_Status", Room_Status_name, Room_Status_value)
	golang_proto.RegisterEnum("RoomStatus.Room_Status", Room_Status_name, Room_Status_value)
	proto.RegisterType((*ErrorMsg)(nil), "RoomStatus.ErrorMsg")
	golang_proto.RegisterType((*ErrorMsg)(nil), "RoomStatus.ErrorMsg")
	proto.RegisterType((*RoomListReq)(nil), "RoomStatus.RoomListReq")
	golang_proto.RegisterType((*RoomListReq)(nil), "RoomStatus.RoomListReq")
	proto.RegisterType((*RoomListResp)(nil), "RoomStatus.RoomListResp")
	golang_proto.RegisterType((*RoomListResp)(nil), "RoomStatus.RoomListResp")
	proto.RegisterType((*RoomCreateReq)(nil), "RoomStatus.RoomCreateReq")
	golang_proto.RegisterType((*RoomCreateReq)(nil), "RoomStatus.RoomCreateReq")
	proto.RegisterType((*RoomCreateResp)(nil), "RoomStatus.RoomCreateResp")
	golang_proto.RegisterType((*RoomCreateResp)(nil), "RoomStatus.RoomCreateResp")
	proto.RegisterType((*RoomReq)(nil), "RoomStatus.RoomReq")
	golang_proto.RegisterType((*RoomReq)(nil), "RoomStatus.RoomReq")
	proto.RegisterType((*RoomResp)(nil), "RoomStatus.RoomResp")
	golang_proto.RegisterType((*RoomResp)(nil), "RoomStatus.RoomResp")
	proto.RegisterType((*Room)(nil), "RoomStatus.Room")
	golang_proto.RegisterType((*Room)(nil), "RoomStatus.Room")
	proto.RegisterType((*CellStatus)(nil), "RoomStatus.CellStatus")
	golang_proto.RegisterType((*CellStatus)(nil), "RoomStatus.CellStatus")
	proto.RegisterType((*CellStatusReq)(nil), "RoomStatus.CellStatusReq")
	golang_proto.RegisterType((*CellStatusReq)(nil), "RoomStatus.CellStatusReq")
	proto.RegisterType((*CellStatusResp)(nil), "RoomStatus.CellStatusResp")
	golang_proto.RegisterType((*CellStatusResp)(nil), "RoomStatus.CellStatusResp")
}

func init() { proto.RegisterFile("GameCtl.proto", fileDescriptor_844dd485888a1988) }
func init() { golang_proto.RegisterFile("GameCtl.proto", fileDescriptor_844dd485888a1988) }

var fileDescriptor_844dd485888a1988 = []byte{
	// 998 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x3f, 0x6f, 0xdb, 0x46,
	0x14, 0x37, 0x29, 0x89, 0xa2, 0x9e, 0x6c, 0x57, 0xb8, 0x1a, 0x8e, 0x22, 0xa7, 0x86, 0xc0, 0xc9,
	0x08, 0x62, 0x31, 0x91, 0x87, 0x20, 0x99, 0x6a, 0x4b, 0x46, 0x24, 0x20, 0x96, 0x5c, 0x4a, 0x46,
	0xd0, 0x2c, 0x84, 0x2c, 0x9e, 0x69, 0xa2, 0x24, 0x8f, 0xbe, 0x3b, 0xba, 0xf0, 0x5a, 0xa0, 0x43,
	0xd7, 0x76, 0xe8, 0xd6, 0xb1, 0x43, 0xbf, 0x40, 0xd7, 0x8e, 0x19, 0x0b, 0x74, 0xea, 0x56, 0x38,
	0xfd, 0x02, 0xfd, 0x06, 0xc5, 0x1d, 0x29, 0x89, 0xb2, 0x24, 0xa7, 0xcd, 0xc4, 0xf7, 0xef, 0xde,
	0xfd, 0xde, 0xdf, 0x23, 0x6c, 0xbc, 0x1a, 0x05, 0xb8, 0xc5, 0xfd, 0x46, 0x44, 0x09, 0x27, 0x08,
	0x2c, 0x42, 0x82, 0x01, 0x1f, 0xf1, 0x98, 0xd5, 0x76, 0x5c, 0x42, 0x5c, 0x1f, 0x9b, 0x52, 0x73,
	0x1e, 0x5f, 0x98, 0x38, 0x88, 0xf8, 0x4d, 0x62, 0x58, 0x7b, 0x94, 0x2a, 0x47, 0x91, 0x67, 0x8e,
	0xc2, 0x90, 0xf0, 0x11, 0xf7, 0x48, 0xc8, 0x52, 0xed, 0x13, 0xf9, 0x19, 0xef, 0xbb, 0x38, 0xdc,
	0x67, 0x5f, 0x8f, 0x5c, 0x17, 0x53, 0x93, 0x44, 0xd2, 0x62, 0x89, 0xf5, 0xbe, 0xeb, 0xf1, 0xcb,
	0xf8, 0xbc, 0x31, 0x26, 0x81, 0xe9, 0x12, 0x97, 0xcc, 0x6e, 0x14, 0x9c, 0x64, 0x24, 0x95, 0x98,
	0x1b, 0x9f, 0x83, 0x7e, 0x4c, 0x29, 0xa1, 0x27, 0xcc, 0x45, 0x0f, 0x41, 0x0f, 0x98, 0x6b, 0x7b,
	0xe1, 0x05, 0xa9, 0x2a, 0x75, 0x65, 0xaf, 0x64, 0x15, 0x03, 0xe6, 0x76, 0xc3, 0x0b, 0x32, 0x51,
	0x39, 0x98, 0x45, 0x55, 0x75, 0xaa, 0x6a, 0x63, 0x16, 0x19, 0x26, 0x94, 0x45, 0x9c, 0xaf, 0x3d,
	0xc6, 0x2d, 0x7c, 0x85, 0xea, 0x50, 0xa6, 0xf8, 0x2a, 0xf6, 0x28, 0x0e, 0x70, 0xc8, 0x53, 0x3f,
	0x59, 0x91, 0xf1, 0x9d, 0x02, 0xeb, 0xb3, 0x13, 0x2c, 0x42, 0x8f, 0xa0, 0xc4, 0xbd, 0x00, 0x33,
	0x3e, 0x0a, 0xa2, 0xf4, 0xc0, 0x4c, 0x80, 0xf6, 0x40, 0xa3, 0x98, 0xc5, 0x3e, 0xaf, 0xaa, 0xf5,
	0xdc, 0x5e, 0xb9, 0x59, 0x69, 0xcc, 0xd2, 0x2a, 0x49, 0x2b, 0xd5, 0xa3, 0x67, 0x50, 0xc2, 0x22,
	0x16, 0x3b, 0x60, 0x6e, 0x35, 0x57, 0x57, 0xf6, 0xca, 0xcd, 0xad, 0xac, 0xf1, 0x24, 0x50, 0x4b,
	0xc7, 0x29, 0x65, 0xec, 0xc1, 0x86, 0x30, 0x68, 0x51, 0x3c, 0xe2, 0x58, 0xc0, 0x7f, 0x00, 0xc5,
	0x98, 0x61, 0x6a, 0x7b, 0x4e, 0x8a, 0x44, 0x13, 0x6c, 0xd7, 0x31, 0xfe, 0x54, 0x60, 0x33, 0x6b,
	0xca, 0xa2, 0x95, 0xb6, 0xf3, 0x01, 0xa9, 0x77, 0x03, 0xda, 0x06, 0x8d, 0x49, 0x40, 0x12, 0x63,
	0xc1, 0x4a, 0x39, 0x74, 0x00, 0xe5, 0x31, 0xf6, 0x7d, 0x3b, 0x55, 0xe6, 0x65, 0x00, 0x0b, 0xd1,
	0x76, 0xd6, 0x2c, 0x10, 0x66, 0x83, 0xc9, 0xa1, 0x4c, 0xcc, 0x85, 0xd5, 0x31, 0x77, 0xd6, 0x66,
	0x51, 0x1f, 0x6d, 0xc2, 0x3a, 0xc5, 0x2c, 0x22, 0x21, 0xc3, 0xe2, 0x9c, 0xb1, 0x03, 0x45, 0x99,
	0x48, 0x7c, 0x85, 0x2a, 0x90, 0xfb, 0x0a, 0xdf, 0xa4, 0xf1, 0x08, 0xd2, 0xf8, 0x51, 0x01, 0x3d,
	0xd1, 0x7e, 0xb0, 0x54, 0x26, 0x94, 0x28, 0x21, 0x41, 0xd2, 0x41, 0xea, 0x4a, 0xfc, 0xba, 0x30,
	0x92, 0x6d, 0xf5, 0x04, 0x0a, 0x12, 0xd4, 0x7d, 0xd5, 0xea, 0xac, 0x59, 0x89, 0xd1, 0x02, 0xec,
	0x5f, 0x55, 0xc8, 0x8b, 0x03, 0x8b, 0xa0, 0x45, 0x69, 0x2e, 0x09, 0xe3, 0xa2, 0x34, 0x49, 0xfe,
	0x35, 0xc1, 0x76, 0x1d, 0xb4, 0x03, 0x25, 0x27, 0xc6, 0x7e, 0x52, 0xb5, 0x9c, 0x54, 0xe9, 0x89,
	0xa0, 0xeb, 0x20, 0x73, 0x5a, 0x19, 0x91, 0xfc, 0xcd, 0xe6, 0x83, 0xbb, 0xe0, 0x1b, 0x09, 0x3d,
	0x2d, 0xd9, 0x16, 0x14, 0x28, 0x89, 0x43, 0x47, 0x66, 0xbe, 0x60, 0x25, 0x0c, 0x42, 0x90, 0x17,
	0x15, 0xaa, 0x6a, 0x52, 0x28, 0x69, 0xf4, 0x7c, 0xbe, 0xb8, 0x45, 0xd9, 0xca, 0xdb, 0x59, 0xff,
	0xad, 0x69, 0x51, 0xb3, 0x05, 0x36, 0x06, 0xa0, 0xa5, 0xa5, 0x5e, 0x07, 0xbd, 0xdf, 0xb3, 0x07,
	0xc3, 0x43, 0x6b, 0x58, 0x59, 0x43, 0x65, 0x28, 0xf6, 0x7b, 0xf6, 0x9b, 0xc3, 0xee, 0xb0, 0xa2,
	0xa0, 0x0a, 0xac, 0xf7, 0x7b, 0x76, 0xa7, 0x3f, 0x18, 0xda, 0xc3, 0x33, 0xab, 0x57, 0x51, 0x53,
	0x49, 0xfb, 0xec, 0xf8, 0x75, 0x22, 0xc9, 0x21, 0x00, 0xad, 0xdf, 0xb3, 0x8f, 0x7b, 0xed, 0x4a,
	0xde, 0x38, 0x01, 0x98, 0x5d, 0xb7, 0x24, 0x7d, 0x08, 0xf2, 0x3c, 0xa6, 0xa1, 0xcc, 0x5d, 0xc1,
	0x92, 0xb4, 0x58, 0x01, 0x32, 0x82, 0x30, 0x0e, 0xd2, 0xc6, 0x2d, 0x0a, 0xbe, 0x17, 0x07, 0xc6,
	0x4f, 0x0a, 0x6c, 0x64, 0xe0, 0xdf, 0x33, 0x46, 0x93, 0xbb, 0xd4, 0xd9, 0x5d, 0x9f, 0x41, 0xc9,
	0x63, 0x76, 0xe4, 0x8f, 0x6e, 0x70, 0xd2, 0x07, 0xba, 0x68, 0x11, 0x8f, 0x9d, 0x4a, 0x09, 0x7a,
	0xb1, 0x6c, 0x2a, 0x56, 0x24, 0x6e, 0x7e, 0x36, 0x8e, 0x74, 0xd0, 0x12, 0xb7, 0xc6, 0x3f, 0x0a,
	0x6c, 0x66, 0x01, 0xde, 0x37, 0xbc, 0x8b, 0x08, 0xe7, 0x9a, 0x3e, 0xb7, 0x7a, 0x9c, 0xf3, 0x73,
	0xe3, 0x7c, 0x07, 0x78, 0xe1, 0xbf, 0x03, 0x9f, 0x1f, 0x6a, 0xed, 0xe3, 0x86, 0xba, 0xf9, 0x73,
	0x1e, 0x32, 0x0f, 0x10, 0xfa, 0x12, 0x20, 0x5d, 0x5d, 0x62, 0x62, 0x1e, 0xde, 0xed, 0xec, 0xe9,
	0x06, 0xac, 0x6d, 0x2d, 0xec, 0x57, 0xb1, 0xe5, 0x6b, 0xdf, 0xfc, 0xf1, 0xf7, 0x0f, 0xea, 0x96,
	0xf1, 0x89, 0x79, 0xfd, 0xcc, 0x14, 0xf3, 0x6b, 0x8e, 0xe5, 0x89, 0x97, 0xca, 0x63, 0xf4, 0x16,
	0xca, 0xaf, 0x30, 0x9f, 0xac, 0x74, 0xb4, 0x30, 0x35, 0xe9, 0xd3, 0x50, 0xab, 0x2e, 0x57, 0xb0,
	0xc8, 0xa8, 0x4a, 0xef, 0xc8, 0xd8, 0x98, 0x7a, 0xf7, 0x3d, 0xc6, 0x85, 0x6f, 0x6b, 0xea, 0x5b,
	0x2e, 0x8c, 0x4f, 0x17, 0xc1, 0xad, 0x42, 0xbc, 0xe8, 0x53, 0xac, 0x25, 0xe1, 0x73, 0x00, 0xd0,
	0xc6, 0x3e, 0x4e, 0x53, 0xf1, 0x3f, 0x5c, 0x2e, 0x26, 0xc1, 0x91, 0x7e, 0x84, 0x53, 0x1b, 0xe0,
	0x2c, 0x72, 0x96, 0xe6, 0x77, 0x6e, 0x34, 0x6a, 0xb5, 0x55, 0xaa, 0xa5, 0x17, 0xc4, 0xd2, 0xa7,
	0xb8, 0xe0, 0x0d, 0xe8, 0x5f, 0xc4, 0x1e, 0xff, 0x50, 0xf9, 0xb6, 0x1b, 0xc9, 0xcf, 0x44, 0x63,
	0xf2, 0xee, 0x37, 0x8e, 0xc5, 0x9f, 0xc6, 0x92, 0x74, 0x5c, 0xc5, 0x9e, 0x48, 0xf1, 0xd1, 0xb7,
	0xca, 0xf7, 0x87, 0x43, 0x54, 0x68, 0xe6, 0x9e, 0x36, 0x9a, 0x8f, 0x15, 0x95, 0x76, 0xc0, 0x70,
	0xad, 0xd3, 0x56, 0x9d, 0x61, 0x7a, 0x8d, 0x69, 0xbd, 0x1b, 0x44, 0x22, 0x46, 0xf1, 0x74, 0xd7,
	0x29, 0x8e, 0x08, 0xf3, 0x38, 0xa1, 0x37, 0xc8, 0xb8, 0xe4, 0x3c, 0x62, 0x2f, 0x4d, 0x33, 0xf3,
	0xbf, 0xc1, 0xf8, 0xf5, 0xf8, 0x32, 0x78, 0xf1, 0xfc, 0xe9, 0x81, 0xd9, 0x6d, 0xb7, 0x86, 0xef,
	0x6e, 0x77, 0x95, 0xdf, 0x6f, 0x77, 0x95, 0xbf, 0x6e, 0x77, 0x95, 0xdf, 0xde, 0xef, 0x2a, 0xef,
	0xde, 0xef, 0x2a, 0x6f, 0x0b, 0x12, 0xd7, 0x2f, 0x6a, 0x45, 0xcc, 0x77, 0xcb, 0xf7, 0x1a, 0xa7,
	0x82, 0x3f, 0x21, 0xce, 0xb9, 0x26, 0x35, 0x07, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x75, 0xfc,
	0x3b, 0xe8, 0x46, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RoomStatusClient is the client API for RoomStatus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RoomStatusClient interface {
	CreateRoom(ctx context.Context, in *RoomCreateReq, opts ...grpc.CallOption) (*RoomResp, error)
	GetRoomList(ctx context.Context, in *RoomListReq, opts ...grpc.CallOption) (*RoomListResp, error)
	GetRoomInfo(ctx context.Context, in *RoomReq, opts ...grpc.CallOption) (*RoomResp, error)
	DeleteRoom(ctx context.Context, in *RoomReq, opts ...grpc.CallOption) (*RoomResp, error)
	UpdateRoom(ctx context.Context, in *CellStatusReq, opts ...grpc.CallOption) (*CellStatusResp, error)
	QuitRoom(ctx context.Context, in *RoomCreateReq, opts ...grpc.CallOption) (*types.Empty, error)
}

type roomStatusClient struct {
	cc *grpc.ClientConn
}

func NewRoomStatusClient(cc *grpc.ClientConn) RoomStatusClient {
	return &roomStatusClient{cc}
}

func (c *roomStatusClient) CreateRoom(ctx context.Context, in *RoomCreateReq, opts ...grpc.CallOption) (*RoomResp, error) {
	out := new(RoomResp)
	err := c.cc.Invoke(ctx, "/RoomStatus.RoomStatus/CreateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomStatusClient) GetRoomList(ctx context.Context, in *RoomListReq, opts ...grpc.CallOption) (*RoomListResp, error) {
	out := new(RoomListResp)
	err := c.cc.Invoke(ctx, "/RoomStatus.RoomStatus/GetRoomList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomStatusClient) GetRoomInfo(ctx context.Context, in *RoomReq, opts ...grpc.CallOption) (*RoomResp, error) {
	out := new(RoomResp)
	err := c.cc.Invoke(ctx, "/RoomStatus.RoomStatus/GetRoomInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomStatusClient) DeleteRoom(ctx context.Context, in *RoomReq, opts ...grpc.CallOption) (*RoomResp, error) {
	out := new(RoomResp)
	err := c.cc.Invoke(ctx, "/RoomStatus.RoomStatus/DeleteRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomStatusClient) UpdateRoom(ctx context.Context, in *CellStatusReq, opts ...grpc.CallOption) (*CellStatusResp, error) {
	out := new(CellStatusResp)
	err := c.cc.Invoke(ctx, "/RoomStatus.RoomStatus/UpdateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomStatusClient) QuitRoom(ctx context.Context, in *RoomCreateReq, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/RoomStatus.RoomStatus/QuitRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoomStatusServer is the server API for RoomStatus service.
type RoomStatusServer interface {
	CreateRoom(context.Context, *RoomCreateReq) (*RoomResp, error)
	GetRoomList(context.Context, *RoomListReq) (*RoomListResp, error)
	GetRoomInfo(context.Context, *RoomReq) (*RoomResp, error)
	DeleteRoom(context.Context, *RoomReq) (*RoomResp, error)
	UpdateRoom(context.Context, *CellStatusReq) (*CellStatusResp, error)
	QuitRoom(context.Context, *RoomCreateReq) (*types.Empty, error)
}

// UnimplementedRoomStatusServer can be embedded to have forward compatible implementations.
type UnimplementedRoomStatusServer struct {
}

func (*UnimplementedRoomStatusServer) CreateRoom(ctx context.Context, req *RoomCreateReq) (*RoomResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (*UnimplementedRoomStatusServer) GetRoomList(ctx context.Context, req *RoomListReq) (*RoomListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomList not implemented")
}
func (*UnimplementedRoomStatusServer) GetRoomInfo(ctx context.Context, req *RoomReq) (*RoomResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomInfo not implemented")
}
func (*UnimplementedRoomStatusServer) DeleteRoom(ctx context.Context, req *RoomReq) (*RoomResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoom not implemented")
}
func (*UnimplementedRoomStatusServer) UpdateRoom(ctx context.Context, req *CellStatusReq) (*CellStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoom not implemented")
}
func (*UnimplementedRoomStatusServer) QuitRoom(ctx context.Context, req *RoomCreateReq) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuitRoom not implemented")
}

func RegisterRoomStatusServer(s *grpc.Server, srv RoomStatusServer) {
	s.RegisterService(&_RoomStatus_serviceDesc, srv)
}

func _RoomStatus_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomStatusServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RoomStatus.RoomStatus/CreateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomStatusServer).CreateRoom(ctx, req.(*RoomCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomStatus_GetRoomList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomStatusServer).GetRoomList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RoomStatus.RoomStatus/GetRoomList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomStatusServer).GetRoomList(ctx, req.(*RoomListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomStatus_GetRoomInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomStatusServer).GetRoomInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RoomStatus.RoomStatus/GetRoomInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomStatusServer).GetRoomInfo(ctx, req.(*RoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomStatus_DeleteRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomStatusServer).DeleteRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RoomStatus.RoomStatus/DeleteRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomStatusServer).DeleteRoom(ctx, req.(*RoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomStatus_UpdateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CellStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomStatusServer).UpdateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RoomStatus.RoomStatus/UpdateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomStatusServer).UpdateRoom(ctx, req.(*CellStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomStatus_QuitRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomStatusServer).QuitRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RoomStatus.RoomStatus/QuitRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomStatusServer).QuitRoom(ctx, req.(*RoomCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _RoomStatus_serviceDesc = grpc.ServiceDesc{
	ServiceName: "RoomStatus.RoomStatus",
	HandlerType: (*RoomStatusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoom",
			Handler:    _RoomStatus_CreateRoom_Handler,
		},
		{
			MethodName: "GetRoomList",
			Handler:    _RoomStatus_GetRoomList_Handler,
		},
		{
			MethodName: "GetRoomInfo",
			Handler:    _RoomStatus_GetRoomInfo_Handler,
		},
		{
			MethodName: "DeleteRoom",
			Handler:    _RoomStatus_DeleteRoom_Handler,
		},
		{
			MethodName: "UpdateRoom",
			Handler:    _RoomStatus_UpdateRoom_Handler,
		},
		{
			MethodName: "QuitRoom",
			Handler:    _RoomStatus_QuitRoom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "GameCtl.proto",
}

func (m *ErrorMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrorMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ErrorMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MsgDesp) > 0 {
		i -= len(m.MsgDesp)
		copy(dAtA[i:], m.MsgDesp)
		i = encodeVarintGameCtl(dAtA, i, uint64(len(m.MsgDesp)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MsgInfo) > 0 {
		i -= len(m.MsgInfo)
		copy(dAtA[i:], m.MsgInfo)
		i = encodeVarintGameCtl(dAtA, i, uint64(len(m.MsgInfo)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoomListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoomListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Requirement) > 0 {
		i -= len(m.Requirement)
		copy(dAtA[i:], m.Requirement)
		i = encodeVarintGameCtl(dAtA, i, uint64(len(m.Requirement)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoomListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoomListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ErrorMsg != nil {
		{
			size, err := m.ErrorMsg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGameCtl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Result) > 0 {
		for iNdEx := len(m.Result) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Result[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGameCtl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Timestamp) > 0 {
		i -= len(m.Timestamp)
		copy(dAtA[i:], m.Timestamp)
		i = encodeVarintGameCtl(dAtA, i, uint64(len(m.Timestamp)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoomCreateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomCreateReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoomCreateReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintGameCtl(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoomCreateResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomCreateResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoomCreateResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ResponseMsg != nil {
		{
			size := m.ResponseMsg.Size()
			i -= size
			if _, err := m.ResponseMsg.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Status != 0 {
		i = encodeVarintGameCtl(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Timestamp) > 0 {
		i -= len(m.Timestamp)
		copy(dAtA[i:], m.Timestamp)
		i = encodeVarintGameCtl(dAtA, i, uint64(len(m.Timestamp)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintGameCtl(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoomCreateResp_CellStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoomCreateResp_CellStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CellStatus != nil {
		{
			size, err := m.CellStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGameCtl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *RoomCreateResp_ErrorMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoomCreateResp_ErrorMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ErrorMsg != nil {
		{
			size, err := m.ErrorMsg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGameCtl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *RoomReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoomReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintGameCtl(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoomResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoomResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ResponseMsg != nil {
		{
			size := m.ResponseMsg.Size()
			i -= size
			if _, err := m.ResponseMsg.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Timestamp) > 0 {
		i -= len(m.Timestamp)
		copy(dAtA[i:], m.Timestamp)
		i = encodeVarintGameCtl(dAtA, i, uint64(len(m.Timestamp)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoomResp_RoomInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoomResp_RoomInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RoomInfo != nil {
		{
			size, err := m.RoomInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGameCtl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *RoomResp_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoomResp_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGameCtl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Room) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Room) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Room) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CellStatus) > 0 {
		for iNdEx := len(m.CellStatus) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CellStatus[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGameCtl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Cell != 0 {
		i = encodeVarintGameCtl(dAtA, i, uint64(m.Cell))
		i--
		dAtA[i] = 0x30
	}
	if m.Round != 0 {
		i = encodeVarintGameCtl(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x28
	}
	if m.Status != 0 {
		i = encodeVarintGameCtl(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.DuelerId) > 0 {
		i -= len(m.DuelerId)
		copy(dAtA[i:], m.DuelerId)
		i = encodeVarintGameCtl(dAtA, i, uint64(len(m.DuelerId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.HostId) > 0 {
		i -= len(m.HostId)
		copy(dAtA[i:], m.HostId)
		i = encodeVarintGameCtl(dAtA, i, uint64(len(m.HostId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintGameCtl(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CellStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CellStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CellStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CellNum != 0 {
		i = encodeVarintGameCtl(dAtA, i, uint64(m.CellNum))
		i--
		dAtA[i] = 0x18
	}
	if m.Turn != 0 {
		i = encodeVarintGameCtl(dAtA, i, uint64(m.Turn))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintGameCtl(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CellStatusReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CellStatusReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CellStatusReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Player != nil {
		{
			size := m.Player.Size()
			i -= size
			if _, err := m.Player.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintGameCtl(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintGameCtl(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CellStatusReq_IsPlayer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CellStatusReq_IsPlayer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.IsPlayer {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *CellStatusReq_CellStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CellStatusReq_CellStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CellStatus != nil {
		{
			size, err := m.CellStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGameCtl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *CellStatusResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CellStatusResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CellStatusResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ResponseMsg != nil {
		{
			size := m.ResponseMsg.Size()
			i -= size
			if _, err := m.ResponseMsg.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Status != 0 {
		i = encodeVarintGameCtl(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Timestamp) > 0 {
		i -= len(m.Timestamp)
		copy(dAtA[i:], m.Timestamp)
		i = encodeVarintGameCtl(dAtA, i, uint64(len(m.Timestamp)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintGameCtl(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintGameCtl(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CellStatusResp_CellStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CellStatusResp_CellStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CellStatus != nil {
		{
			size, err := m.CellStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGameCtl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *CellStatusResp_ErrorMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CellStatusResp_ErrorMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ErrorMsg != nil {
		{
			size, err := m.ErrorMsg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGameCtl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func encodeVarintGameCtl(dAtA []byte, offset int, v uint64) int {
	offset -= sovGameCtl(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ErrorMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgInfo)
	if l > 0 {
		n += 1 + l + sovGameCtl(uint64(l))
	}
	l = len(m.MsgDesp)
	if l > 0 {
		n += 1 + l + sovGameCtl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Requirement)
	if l > 0 {
		n += 1 + l + sovGameCtl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovGameCtl(uint64(l))
	}
	if len(m.Result) > 0 {
		for _, e := range m.Result {
			l = e.Size()
			n += 1 + l + sovGameCtl(uint64(l))
		}
	}
	if m.ErrorMsg != nil {
		l = m.ErrorMsg.Size()
		n += 1 + l + sovGameCtl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomCreateReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovGameCtl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomCreateResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovGameCtl(uint64(l))
	}
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovGameCtl(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovGameCtl(uint64(m.Status))
	}
	if m.ResponseMsg != nil {
		n += m.ResponseMsg.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomCreateResp_CellStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CellStatus != nil {
		l = m.CellStatus.Size()
		n += 1 + l + sovGameCtl(uint64(l))
	}
	return n
}
func (m *RoomCreateResp_ErrorMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrorMsg != nil {
		l = m.ErrorMsg.Size()
		n += 1 + l + sovGameCtl(uint64(l))
	}
	return n
}
func (m *RoomReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovGameCtl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovGameCtl(uint64(l))
	}
	if m.ResponseMsg != nil {
		n += m.ResponseMsg.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomResp_RoomInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomInfo != nil {
		l = m.RoomInfo.Size()
		n += 1 + l + sovGameCtl(uint64(l))
	}
	return n
}
func (m *RoomResp_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovGameCtl(uint64(l))
	}
	return n
}
func (m *Room) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovGameCtl(uint64(l))
	}
	l = len(m.HostId)
	if l > 0 {
		n += 1 + l + sovGameCtl(uint64(l))
	}
	l = len(m.DuelerId)
	if l > 0 {
		n += 1 + l + sovGameCtl(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovGameCtl(uint64(m.Status))
	}
	if m.Round != 0 {
		n += 1 + sovGameCtl(uint64(m.Round))
	}
	if m.Cell != 0 {
		n += 1 + sovGameCtl(uint64(m.Cell))
	}
	if len(m.CellStatus) > 0 {
		for _, e := range m.CellStatus {
			l = e.Size()
			n += 1 + l + sovGameCtl(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CellStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovGameCtl(uint64(l))
	}
	if m.Turn != 0 {
		n += 1 + sovGameCtl(uint64(m.Turn))
	}
	if m.CellNum != 0 {
		n += 1 + sovGameCtl(uint64(m.CellNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CellStatusReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovGameCtl(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovGameCtl(uint64(l))
	}
	if m.Player != nil {
		n += m.Player.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CellStatusReq_IsPlayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *CellStatusReq_CellStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CellStatus != nil {
		l = m.CellStatus.Size()
		n += 1 + l + sovGameCtl(uint64(l))
	}
	return n
}
func (m *CellStatusResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovGameCtl(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovGameCtl(uint64(l))
	}
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovGameCtl(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovGameCtl(uint64(m.Status))
	}
	if m.ResponseMsg != nil {
		n += m.ResponseMsg.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CellStatusResp_CellStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CellStatus != nil {
		l = m.CellStatus.Size()
		n += 1 + l + sovGameCtl(uint64(l))
	}
	return n
}
func (m *CellStatusResp_ErrorMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrorMsg != nil {
		l = m.ErrorMsg.Size()
		n += 1 + l + sovGameCtl(uint64(l))
	}
	return n
}

func sovGameCtl(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGameCtl(x uint64) (n int) {
	return sovGameCtl(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ErrorMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameCtl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrorMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrorMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameCtl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGameCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgDesp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameCtl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGameCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgDesp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameCtl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameCtl
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameCtl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameCtl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requirement", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameCtl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGameCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requirement = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameCtl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameCtl
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameCtl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameCtl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameCtl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGameCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameCtl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGameCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result, &Room{})
			if err := m.Result[len(m.Result)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameCtl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGameCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ErrorMsg == nil {
				m.ErrorMsg = &ErrorMsg{}
			}
			if err := m.ErrorMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameCtl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameCtl
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameCtl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomCreateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameCtl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomCreateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomCreateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameCtl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGameCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameCtl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameCtl
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameCtl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomCreateResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameCtl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomCreateResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomCreateResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameCtl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGameCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameCtl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGameCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameCtl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGameCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Room{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ResponseMsg = &RoomCreateResp_CellStatus{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameCtl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGameCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ErrorMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ResponseMsg = &RoomCreateResp_ErrorMsg{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameCtl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameCtl
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameCtl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameCtl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameCtl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGameCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameCtl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameCtl
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameCtl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameCtl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameCtl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGameCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameCtl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGameCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Room{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ResponseMsg = &RoomResp_RoomInfo{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameCtl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGameCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ErrorMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ResponseMsg = &RoomResp_Error{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameCtl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameCtl
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameCtl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Room) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameCtl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Room: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Room: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameCtl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGameCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameCtl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGameCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DuelerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameCtl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGameCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DuelerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Room_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cell", wireType)
			}
			m.Cell = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cell |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameCtl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGameCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellStatus = append(m.CellStatus, &CellStatus{})
			if err := m.CellStatus[len(m.CellStatus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameCtl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameCtl
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameCtl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CellStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameCtl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CellStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CellStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameCtl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGameCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Turn", wireType)
			}
			m.Turn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Turn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellNum", wireType)
			}
			m.CellNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CellNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameCtl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameCtl
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameCtl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CellStatusReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameCtl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CellStatusReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CellStatusReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameCtl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGameCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameCtl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGameCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPlayer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Player = &CellStatusReq_IsPlayer{b}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameCtl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGameCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CellStatus{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Player = &CellStatusReq_CellStatus{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameCtl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameCtl
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameCtl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CellStatusResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameCtl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CellStatusResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CellStatusResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameCtl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGameCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameCtl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGameCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameCtl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGameCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameCtl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGameCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CellStatus{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ResponseMsg = &CellStatusResp_CellStatus{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameCtl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGameCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ErrorMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ResponseMsg = &CellStatusResp_ErrorMsg{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameCtl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameCtl
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameCtl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGameCtl(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGameCtl
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGameCtl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGameCtl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGameCtl
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGameCtl
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGameCtl
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGameCtl        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGameCtl          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGameCtl = fmt.Errorf("proto: unexpected end of group")
)
